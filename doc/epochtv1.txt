EPOCH TV-1
==========

References
----------
https://forums.atariage.com/topic/130365-atari-7800-vs-epoch-super-cassette-vision/ - [takeda.txt]
http://takeda-toshiya.my.coocan.jp/scv/index.html
https://github.com/mamedev/mame - src/mame/epoch/scv.cpp
http://cmpslv2.starfree.jp/Scv/EnrScv.htm - pin names


Overview
--------
. 64-pin DIP
. Clock: 14.318181 MHz XTAL (NTSC)
. Analog video -- R,G,B,\CSYNC
  . R,G,B
    . Three voltage levels
    . Always lowest level during blanking
  . \CSYNC
    . Two voltage levels: LOW=60mV, HIGH=1.00V
      . Normally LOW
      . HIGH at HSYNC
      . HIGH (XOR w/ HSYNC) at VSYNC
  . Timing
    . Full frame (incl. blanking): 260 cols x 263 rows
    . Render area (incl. overscan): 208 cols x 232 rows
    . Pixel rate: 4.090909 MHz (XTAL / 3.5)
    . Line rate (horizontal refresh): 15734 kHz
    . Frame rate (vertical refresh): 59.826 Hz


Pinout
------
. 1-8     VD[0:7]     VRAM data
. 9-16    DB[0:7]     CPU data
. 18,19   X1,X2
. 21      AGND
. 22      CHROMA      50mV +/-270mV-p @ 3.58MHz
. 23-25   R,G,B
. 26      \CSYNC/LUMA
. 27      VMODE       CVBS=0V, RGB=5V
. 28      \VWE        VRAM write en.
. 29      \SCPU       uPD1771C chip select
. 30,31   \VCS[1:0]   VRAM chip selects
. 33-43   VAB[0:10]   VRAM address
. 44-57   AB[15,12:0] CPU address
. 58      CLK         CPU Phi clock out
. 60      \WAIT       CPU bus stall
. 61      \RD         CPU read
. 62      \WR         CPU write
. 63      \RESET
. 64      VBL         INT1 to CPU


External VRAM
-------------
. Directly addressable from CPU ($2000-$2FFF)
. uPD4016C-2 -- 200ns transaction time
. 2 chips x 128 row x 128 col = 2 x 2048 x 8 bits
. shared address and data buses
. \VCS always select one chip
. contents: sprite patterns
. 5 MT/s x 16 bits          --- WRONG
  . given max. 30 sprite per row, 120 bytes are fetched per row


Internal RAM
------------
. Directly addressable from CPU ($3000-$33FF)
. Address map:
  000-1FF (512B) background (Character / graphics bitmap)
  200-3FF (512B) sprite attributes


Internal ROM
------------
. 000-3FF (1KB) Character patterns
. Not accessible from CPU -- CPU ROM has its own copy


Registers
---------

R0 ($3400)
. bit 0: enable bitmap
. bit 1: bitmap res.: 0=hi-res, 1=lo-res
. bit 2: hide sprites 64-127
. bit 4: enable sprites
. bit 5: 2-color sprite mode
. bit 6: invert XMAX effect: 1=render char. after XMAX
. bit 7: invert YMAX effect: 1=render char. after YMAX

R1 ($3401)
. bits 7-4: hi-res bitmap FG color
. bits 3-0: hi-res bitmap BG color

R2 ($3402) - Character / graphics window split
. bits 3-0: XMAX: pos = (XMAX * 16) - 24
. bits 7-4: YMAX: pos = (YMAX * 16) - 23

R3 ($3403)
. bits 7-4: char. FG color
. bits 3-0: char. BG color


CPU memory bus
--------------

The TV-1 effectively uses A15 as its chip select. It only connects to
address bits 15 and 12 - 0. (Note that A15 is externally pulled up,
and uPD7801 tri-states A when accessing internal RAM/ROM.)

The TV-1 decodes address and drives chip select for uPD1771C. The
address decode appears to be combinatorial logic -- glitches are
evident on chip select.

Probing the SCV reveals that the TV-1 asserts \WAIT when accessed,
extending T2 by one T-cycle. This includes uPD1771C accesses (for
which the TV-1 decodes address).


Screen size
-----------

The active render area, including overscan, is 208 cols x 232 rows.
Borders outside this area contain black pixels.

The character screen edges are used by some games for internal state.
(For example, a character on the right edge of the Lupin III title
screen "follows" the music.)  This is fine, as analog TV/monitor
overscan hides the edges.

My LCD TV with NTSC tuner, hooked up to the console's RF output, shows
only the area (1,2)-(204,231).


Background
----------

Screen is divided into character and graphics areas.

  Character
  ---------

  32x16 tilemap, 8x16 tiles
  Character pattern is 8x8, drawn in top half of tile
  Tile @ (tx, ty) draws at screen coord. (tx*8 - 17, ty*16 - 16)
    Characters in tiles (2,1)-(28,15) fall within the render area


  Bitmapped graphics
  ------------------

  Two resolutions:
  - lo-res: 32x32 bitmap, 4bpp color
  - hi-res: 64x64 bitmap, 1bpp color


Sprite pattern
--------------

. 16x16 1-color

00[7,6,5,4] => byte address 0x00, bits 7-4

    F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0  Col
0   00[7,6,5,4] 01[7,6,5,4] 02[7,6,5,4] 03[7,6,5,4]
1   00[3,2,1,0] 01[3,2,1,0] 02[3,2,1,0] 03[3,2,1,0]
2   04[7,6,5,4] 05[7,6,5,4] 06[7,6,5,4] 07[7,6,5,4]
3   04[3,2,1,0] 05[3,2,1,0] 06[3,2,1,0] 07[3,2,1,0]
4-D      :           :           :           :
E   1C[7,6,5,4] 1D[7,6,5,4] 1E[7,6,5,4] 1F[7,6,5,4]
F   1C[3,2,1,0] 1D[3,2,1,0] 1E[3,2,1,0] 1F[3,2,1,0]
Row


Sprite attributes
-----------------

Sprite #sidx is described by 4 bytes:

B0 ($0200 + sidx * 4)
. bit 7-1:  Y position (sy)
. bit 0:    link Y

B1 ($0201 + sidx * 4)
. bit 7-4:  start line
. bit 3-0:  color

B2 ($0202 + sidx * 4)
. bit 7-1:  X position (sx)
. bit 0:    link X

B3 ($0203 + sidx * 4)
. bit 7:    split
. bit 6-0:  pattern index


Sprite @ (sx, sy) draws at render coord. (sx*2 - 23, sy*2 - 14)

[TODO: Lots of details, double/half-wide/high, 2-color, etc.]



Character patterns
------------------
   0123 4567 89AB CDEF
0x  αβɣ πΣΩ♠︎ ♥︎♦︎♣︎© ↳↵÷\
1x ○●◉◻︎ ▦︎⎡⎤⎣ ⎦⫧♪♪ →←↑↓
2x  !"# $%&' ()*+ ,-./
3x 0123 4567 89:; <=>?
4x @ABC DEFG HIJK LMNO
5x PQRS TUVW XYZ[ ¥]^_
6x  abc defg hijk lmno
7x pqrs tuvw xyz{ |}~■

8x-Fx repeat 0x-7x


Colors
------

4-bit color == 16 colors
R,G,B output three voltage levels: V0=250mV, V1=1110mV, V2=1400mV

. V0-2 map of each color channel for all 16 colors

Color #          11 1111
     0123 4567 8901 2345
     ---- ---- ---- ----
  R: 0001 0100 2222 2112
  G: 0000 2221 0101 2112
  B: 1022 0120 0021 0012


Video timing
------------

1q = 1/2 clock = (0.5 / 14.318181) us
1p = pixel = 7q

HSYNC period: 63.556us -- 15734 kHz
VSYNC period: 16.7151ms -- 59.826 Hz

Row 0 starts on VSYNC falling edge. (Actual row counter value is unknown.)
- VBL is HIGH during rows 251-18.
- VSYNC is HIGH (\CSYNC is inverted) during rows 260-262.

Rows  19-250: VBL = 0, VSYNC = 0
Rows 251-259: VBL = 1, VSYNC = 0
Rows 260-262: VBL = 1, VSYNC = 1
Rows   0- 18: VBL = 1, VSYNC = 0

 -0.010us / v  -18q / ~-3p: VBL falling edge
  0.614us / v    0q /   0p: \CSYNC falling edge
  6.232us / ^  161q /  23p: start of first pixel rendered in row 19
 57.076us / v 1617q / 231p: end of last pixel rendered    "
 59.290us / v 1680q / 240p: \CSYNC rising edge
 64.172us / v 1820q / 260p: \CSYNC falling edge
 69.786us / ^ 1981q / 283p: start of first pixel rendered in row 20
120.630us / ^ 3437q / 491p: end of last pixel rendered    "
122.838us / v 3500q / 500p: \CSYNC rising edge
127.724us / v 3640q / 520p: \CSYNC falling edge

-62.948us / v    0q /   0p: \CSYNC falling edge               --- 14.6819ms
-57.324us / ^  161q /  23p: start of first pixel rendered in row 18
 -6.483us / ^ 1617q / 231p: end of last pixel rendered    "
 -4.276us / v 1680q / 240p: \CSYNC rising edge
 -0.017us / v 1802q /~257p: VBL rising edge                   --- 14.7449ms

(^/v = clock [XOUT] rising/falling edge)


Column 0 starts on HSYNC falling edge (\CSYNC falling). (Actual column counter value is unknown.)
- VBL toggles on column 257 + 3q.
- HSYNC is HIGH during columns 240-259.
- Pixels are rendered during columns 23-230.

Columns   0- 22: HBL = 1, HSYNC = 0
Columns  23-230: HBL = 0, HSYNC = 0
Columns 231-239: HBL = 1, HSYNC = 0
Columns 240-259: HBL = 1, HSYNC = 1
